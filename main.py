from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.chrome.options import Options
import time
import csv
import random
from webdriver_manager.chrome import ChromeDriverManager
import os
import json

# ---------------- Setup Selenium ----------------
options = Options()
options.add_argument("--start-maximized")
options.add_argument("--incognito")
options.add_argument("user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Safari/537.36")
options.add_experimental_option("excludeSwitches", ["enable-automation"])
options.add_experimental_option("useAutomationExtension", False)
options.add_argument('--disable-blink-features=AutomationControlled')

driver = webdriver.Chrome(service=Service(ChromeDriverManager().install()), options=options)

# ---------------- Open only 1 tab (you will open the 2nd one manually) ----------------
driver.get("about:blank")  # This is a dummy tab (left side)

print("тЮбя╕П рдХреГрдкрдпрд╛ Chrome рдореЗрдВ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдПрдХ рдирдпрд╛ рдЯреИрдм (Ctrl+T) рдЦреЛрд▓реЗрдВ рдФрд░ Shopee рдХреИрдЯреЗрдЧрд░реА рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдБред")
input("Shopee рдХреИрдЯреЗрдЧрд░реА рдкреЗрдЬ рджреВрд╕рд░реЗ рдЯреИрдм рдореЗрдВ рдЦреБрд▓рдиреЗ рдХреЗ рдмрд╛рдж рдпрд╣рд╛рдБ Enter рджрдмрд╛рдПрдБ...")

# ---------------- CSV setup ----------------
csv_file = "product_links.csv"
# Ensure the file is writable, create it if it doesn't exist.
with open(csv_file, "w", newline="", encoding="utf-8") as f:
    writer = csv.writer(f)
    writer.writerow(["Product Link"])

# ---------------- API responses folder setup ----------------
data_folder = "api_responses"
os.makedirs(data_folder, exist_ok=True)

# ---------------- Scraping loop ----------------
while True:
    input("тЮбя╕П рд╡рд░реНрддрдорд╛рди рдХреИрдЯреЗрдЧрд░реА рдЯреИрдм рдХреЛ рд╕реНрдХреНрд░реИрдк рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП Enter рджрдмрд╛рдПрдБ...")

    try:
        # Always use the latest tab (the manual one)
        manual_tab = driver.window_handles[-1]
        driver.switch_to.window(manual_tab)
        print(f"тЬЕ Active Tab URL: {driver.current_url}")

        # =========================================================================
        # STEP 1: рд╕рдмрд╕реЗ рдкрд╣рд▓реЗ рд╕рднреА рдкреНрд░реЛрдбрдХреНрдЯ рд▓рд┐рдВрдХ рдЗрдХрдЯреНрдард╛ рдХрд░реЗрдВ
        # =========================================================================
        print("тП│ рдкреЗрдЬ рдХреЛ рдиреАрдЪреЗ рд╕реНрдХреНрд░реЙрд▓ рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ рддрд╛рдХрд┐ рд╕рднреА рдкреНрд░реЛрдбрдХреНрдЯреНрд╕ рд▓реЛрдб рд╣реЛ рд╕рдХреЗрдВ...")
        last_height = driver.execute_script("return document.body.scrollHeight")
        while True:
            driver.execute_script("window.scrollTo(0, document.body.scrollHeight);")
            time.sleep(random.uniform(2, 4))
            new_height = driver.execute_script("return document.body.scrollHeight")
            if new_height == last_height:
                break
            last_height = new_height
        print("тЬЕ рд╕реНрдХреНрд░реЙрд▓рд┐рдВрдЧ рдкреВрд░реА рд╣реБрдИред")

        product_elements = driver.find_elements(By.XPATH,
            '//div[contains(@class,"h-full") and .//a[@class="contents"]]/a[@class="contents"]'
        )

        # рд╕рднреА рд▓рд┐рдВрдХ рдХреЛ рдПрдХ рд▓рд┐рд╕реНрдЯ рдореЗрдВ рд╕реНрдЯреЛрд░ рдХрд░реЗрдВ
        product_links = []
        for elem in product_elements:
            href = elem.get_attribute('href')
            if href:
                product_links.append(href)

        print(f"тЬЕ рдХреБрд▓ {len(product_links)} рдкреНрд░реЛрдбрдХреНрдЯ рд▓рд┐рдВрдХ рдорд┐рд▓реЗред рдЕрдм рдЗрдиреНрд╣реЗрдВ рдкреНрд░реЛрд╕реЗрд╕ рдХрд┐рдпрд╛ рдЬрд╛рдПрдЧрд╛ред")

        # рд╕рднреА рд▓рд┐рдВрдХ рдХреЛ рдПрдХ рд╕рд╛рде CSV рдореЗрдВ рд╕реЗрд╡ рдХрд░реЗрдВ
        with open(csv_file, "a", newline="", encoding="utf-8") as f:
            writer = csv.writer(f)
            for link in product_links:
                writer.writerow([link])
        print(f"тЬЕ рд╕рднреА {len(product_links)} рд▓рд┐рдВрдХ '{csv_file}' рдореЗрдВ рд╕реЗрд╡ рдХрд░ рджрд┐рдП рдЧрдП рд╣реИрдВред")

        # =========================================================================
        # STEP 2: рдЕрдм рдПрдХ-рдПрдХ рдХрд░рдХреЗ рд╣рд░ рд▓рд┐рдВрдХ рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░реЗрдВ
        # =========================================================================
        for index, link in enumerate(product_links):
            print(f"\nЁЯФД рдкреНрд░реЛрд╕реЗрд╕ рд╣реЛ рд░рд╣рд╛ рд╣реИ рд▓рд┐рдВрдХ {index + 1}/{len(product_links)}: {link}")
            try:
                # рдкреНрд░реЛрдбрдХреНрдЯ рдкреЗрдЬ рдкрд░ рдЬрд╛рдПрдБ
                driver.get(link)
                time.sleep(random.uniform(2, 4))  # рдкреЗрдЬ рд▓реЛрдб рд╣реЛрдиреЗ рдХреЗ рд▓рд┐рдП рд░реБрдХреЗрдВ

                # рдЗрдВрд╕рд╛рди рдХреА рддрд░рд╣ рдереЛрдбрд╝рд╛ рд╕реНрдХреНрд░реЙрд▓ рдХрд░реЗрдВ
                driver.execute_script("window.scrollBy(0, Math.random() * 400 + 200);")
                time.sleep(random.uniform(1, 2))

                # URL рд╕реЗ shop_id рдФрд░ item_id рдирд┐рдХрд╛рд▓реЗрдВ
                current_url = driver.current_url
                if '-i.' in current_url:
                    parts = current_url.split('-i.')[1].split('.')
                    if len(parts) >= 2:
                        shop_id = parts[0]
                        item_id = parts[1].split('?')[0]
                    else:
                        print(f"тЭМ рдЗрд╕ URL рд╕реЗ ID рдкрд╛рд░реНрд╕ рдирд╣реАрдВ рд╣реЛ рд╕рдХреА: {current_url}")
                        continue
                else:
                    print(f"тЭМ рдЕрдорд╛рдиреНрдп рдкреНрд░реЛрдбрдХреНрдЯ URL рдлреЙрд░реНрдореЗрдЯ: {current_url}")
                    continue

                # API URL рдмрдирд╛рдПрдБ
                api_url = f"https://shopee.tw/api/v4/pdp/get_pc?item_id={item_id}&shop_id={shop_id}&offset_in_minutes=330&detail_level=0"

                # JavaScript рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░рдХреЗ API рдбреЗрдЯрд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ
                script = f"""
                var callback = arguments[arguments.length - 1];
                fetch('{api_url}')
                    .then(res => {{
                        if (!res.ok) {{
                            throw new Error('Network response was not ok');
                        }}
                        return res.json();
                    }})
                    .then(data => callback(JSON.stringify(data)))
                    .catch(err => callback('error: ' + err.message));
                """
                response_str = driver.execute_async_script(script)

                if response_str.startswith('error'):
                    print(f"тЭМ рдЖрдЗрдЯрдо {item_id} рдХреЗ рд▓рд┐рдП API рд╕реЗ рдбреЗрдЯрд╛ рд▓рд╛рдиреЗ рдореЗрдВ рддреНрд░реБрдЯрд┐: {response_str}")
                else:
                    try:
                        data = json.loads(response_str)
                        file_path = os.path.join(data_folder, f"{shop_id}_{item_id}.json")
                        with open(file_path, 'w', encoding='utf-8') as json_f:
                            json.dump(data, json_f, ensure_ascii=False, indent=4)
                        print(f"тЬЕ рдЖрдЗрдЯрдо {item_id} рдХрд╛ API рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рд╕реЗрд╡ рдХрд┐рдпрд╛ рдЧрдпрд╛ -> {file_path}")
                    except json.JSONDecodeError:
                        print(f"тЭМ рдЖрдЗрдЯрдо {item_id} рдХреЗ рд▓рд┐рдП рдЕрдорд╛рдиреНрдп JSON рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рдорд┐рд▓рд╛ред")

                # *** Rate Limit: 1 рдорд┐рдирдЯ рдореЗрдВ 7 рд▓рд┐рдВрдХ рд╕реЗ рдЬреНрдпрд╛рджрд╛ рдирд╣реАрдВ ***
                # рд╣рд░ рд▓рд┐рдВрдХ рдХреЗ рдмрд╛рдж 8-10 рд╕реЗрдХрдВрдб рд░реБрдХреЗрдВ (60 рд╕реЗрдХрдВрдб / 7 рд▓рд┐рдВрдХ тЙИ 8.5 рд╕реЗрдХрдВрдб рдкреНрд░рддрд┐ рд▓рд┐рдВрдХ)
                print("тП│ рд░реЗрдЯ рд▓рд┐рдорд┐рдЯ рдХреЗ рд▓рд┐рдП рдереЛрдбрд╝рд╛ рдЗрдВрддрдЬрд╝рд╛рд░...")
                time.sleep(random.uniform(8, 10))

            except Exception as inner_e:
                print(f"тЭМ рдЗрд╕ рд▓рд┐рдВрдХ рдХреЛ рдкреНрд░реЛрд╕реЗрд╕ рдХрд░рддреЗ рд╕рдордп рддреНрд░реБрдЯрд┐ рд╣реБрдИ '{link}': {inner_e}")
                continue # рдЕрдЧрд░ рдХреЛрдИ рдПрд░рд░ рдЖрдП рддреЛ рдЕрдЧрд▓реЗ рд▓рд┐рдВрдХ рдкрд░ рдЬрд╛рдПрдБ

    except Exception as e:
        print(f"тЭМ рдПрдХ рдмрдбрд╝реА рддреНрд░реБрдЯрд┐ рд╣реБрдИ: {e}, рдЕрдЧрд▓реА рдХреЛрд╢рд┐рд╢ рдкрд░ рдЬрд╛ рд░рд╣реЗ рд╣реИрдВ...")

    cont = input("\nрдХреНрдпрд╛ рдЖрдк рджреВрд╕рд░реА рдХреИрдЯреЗрдЧрд░реА рд╕реНрдХреНрд░реИрдк рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ? (yes/no): ")
    if cont.lower() != "yes":
        break

# ---------------- Finish ----------------
driver.quit()
print("\nЁЯОЙ рдХрд╛рдо рдкреВрд░рд╛ рд╣реБрдЖ! CSV рдФрд░ API рд░рд┐рд╕реНрдкреЙрдиреНрд╕ рд╕реЗрд╡ рдХрд░ рджрд┐рдП рдЧрдП рд╣реИрдВред")